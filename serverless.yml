service: token 

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"
  environment:
    TABLE_NAME: tjr_tokens

  stage: dev
  region: eu-west-1

package:
  include:
    - functions/node_modules/uuid/**
  exclude:
    - node_modules/**
    - tests/**
    - docs/**
    - README.md

functions:
  add:
    handler: functions/add.handler
    events:
      - http:
          path: /
          method: post

  get:
    handler: functions/get.handler
    events:
      - http:
          path: /{id}
          method: get

  delete:
    handler: functions/delete.handler
    events:
      - http:
          path: /{id}
          method: delete

resources:
  Resources:
    tokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tjr_tokens
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
